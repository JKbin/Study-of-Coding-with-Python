def printSubset(arr, n):
    # n = 4
    # 1 << n : 2*2*2*2 = 16
    for subset in range(1 << n):
        print('{' , end =' ')
        for j in range(n):
            if subset & (1 << j):
                print(arr[j], end=' ')
                #print(bin(subset & (1 << j)), end= ' ')
        print('}')
    
setdata = ['A','B','C','D']
printSubset(setdata, 4)

# 1. i번째 원소가 있는지 확인
# (비트로 표현된 집합) & (1 << i) : and 연산
# ex) 0101의 2번째 원소가 있는지 확인
# 0101 & (1 << 2) = 0101 & 0100 = 0100


# 2. i번째 원소를 추가
# (비트로 표현된 집합) | (1 << i)
# ex) 0101에 1번째 원소를 추가
# 0101 | (1 << 1) = 0101 | 0010 = 0111

# 3. i번째 원소를 삭제
# (비트로 표현된 집합) & ~(1 << i)
# ex) 0101의 2번째 원소를 삭제
# 0101 & ~(1 << 2) = 0101 & ~(0100) = 0101 & 1011 = 0001



# 비트 연산 종류

#   '&'   AND     x & y       두 비트가 모두 1일 경우에만 1
#   '|'   OR      x | y       두 비트 중 하나라도 1이면 1
#   '^'   XOR     x ^ y       두 비트가 같으면 0, 다르면 1
#   '~'   NOT      ~x         각 비트를 반전, 0이면 1, 1이면 0

#   '<<'    Left shift       x << 2      비트를 왼쪽으로 이동, 하나 이동할 때마다 곱하기 2, x = 1, x << 2, x = 4
#   '>>'    Right shift      x >> 2      비트를 오른쪽으로 이동, 하나 이동할 때마다 나누기 2


x = 1
#x <<= 2
x = x << 2
#print(x)

x = 32
#x >>= 2
x = x >> 2
#print(x)

